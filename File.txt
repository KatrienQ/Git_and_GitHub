- Git keeps track of timeline of your commits (mostly local), GitHub is a hosting service (cloud-based) that keeps track of all your timelines

- Structure (4 conceptual areas)
    - My computer
        - Develop area (folder where the project is developed, where documents are in)
        - Local repository (= Git that is organizing for you)
        - Staging area (= channel/location that will help in preparing the documents from the develop area for staging)
    - Another computer (somewhere else)
        - Remote repository (i.e. GitHub)

- Meaningful messages
    - Why was it changed
    - How this addresses the issue
    - Effects dut the change
    - Limitations of the change
    
    → Be descriptive!
    
- Saving a point in time
    - Add to staging area
    ```bash
    $git add File
    ```
    - Commit
    ```bash
    $git commit -m "meassage"
    ```
    → You can also do this in ungit, but less recommended for complex projects

- How can I see the history of my timeline?
    → Find out how you can see a list of commits, a history of all that was added to git
    ```bash
    $git log
    ```
    Additional arguments:
    - `-p` or `--patch` shows the difference (the *patch* output)
    - `--stat` for some abbreviated stats for each commit
    - `--pretty` changes the log output to formats other than the default

- How can I travel within the timeline?
    → Do some search to find out how you can move from one commit to another and back
    ```bash
    $git checkout <commit ID>
    ```
    Additional arguments:
    - `Commit hash` to restore that commit to your computer
    - `master` to restore the last version

- Github
    - README.txt
        → Detailed description of your project and tool usage (if it is the case)
    - .gitignore
        → List of files that should not be added to repository
        - data files
        - backup files
        - intermediate files
        - Just a text file
            - Can list one by one
            - can use templated (GitHub)
            - Can use Expressions (e.g. all .csv files)

- What is your project status
    ```bash
    $git status
    ```
    Then you get:
    - Changes to be commited
    - Changes not staged
    - Untracked files

- - How do we connect to a remote repository?
    ```bash
    $git remote add <name> <URL>
    ```
    -> Creates bridge between local repository that git created for you and GitHub remote repo

- Alternative histories: branches
    - Branch
        - Alternative history of commits
        - has a specific name
        - Need to continue
